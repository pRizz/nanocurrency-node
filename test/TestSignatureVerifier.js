"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UInt256_1 = require("../src/lib/UInt256");
var assert = require("assert");
var MessageSigner_1 = require("../src/lib/MessageSigner");
var UInt512_1 = require("../src/lib/UInt512");
var SignatureVerifier_1 = require("../src/lib/SignatureVerifier");
var Numbers_1 = require("../src/lib/Numbers");
var nacl = require('tweetnacl-blake2b');
// must be generated by nacl.sign.keyPair(), otherwise signing/verifying fails
var someSecretKeyUint8Array = new Uint8Array([127, 63, 106, 141, 25, 123, 43, 17, 51, 87, 244, 90, 139, 249, 202, 186, 57, 205, 155, 51, 151, 20, 164, 33, 16, 117, 133, 175, 27, 121, 103, 35, 48, 152, 42, 234, 23, 107, 217, 25, 171, 179, 48, 157, 23, 108, 219, 19, 89, 175, 157, 241, 28, 114, 125, 52, 141, 28, 128, 209, 242, 169, 88, 234]);
describe('SignatureVerifier', function () {
    describe('#verify()', function () {
        it('should assert a valid signature from a random key pair', function () {
            var _a = nacl.sign.keyPair(), secretKey = _a.secretKey, publicKey = _a.publicKey;
            var message = Buffer.from('testing');
            var signature = MessageSigner_1.default.sign(new UInt512_1.default({ uint8Array: secretKey }), message);
            assert(SignatureVerifier_1.default.verify(message, signature, new UInt256_1.default({ uint8Array: publicKey })));
        });
        it('should assert a valid signature from a static secret key', function () {
            var secretKeyUint8Array = someSecretKeyUint8Array;
            var publicKey = nacl.sign.keyPair.fromSecretKey(secretKeyUint8Array).publicKey;
            var message = Buffer.from('testing');
            var signature = MessageSigner_1.default.sign(new UInt512_1.default({ uint8Array: secretKeyUint8Array }), message);
            assert(SignatureVerifier_1.default.verify(message, signature, new UInt256_1.default({ uint8Array: publicKey })));
        });
        it('should assert a valid signature from a static seed', function () {
            var seed = new Uint8Array([46, 135, 102, 118, 84, 123, 132, 242, 106, 233, 2, 202, 243, 172, 161, 111, 249, 20, 138, 247, 80, 41, 121, 129, 245, 94, 34, 147, 114, 252, 77, 184]);
            var _a = nacl.sign.keyPair.fromSeed(seed), secretKey = _a.secretKey, publicKey = _a.publicKey;
            var message = Buffer.from('testing');
            var signature = MessageSigner_1.default.sign(new UInt512_1.default({ uint8Array: secretKey }), message);
            assert(SignatureVerifier_1.default.verify(message, signature, new UInt256_1.default({ uint8Array: publicKey })));
        });
        it('should assert a valid blake signature', function () {
            var message = new UInt256_1.default().asBuffer();
            var signatureBuffer = Buffer.from('43E34B96F49CC820712A19D08D3E281B538A1982CA3880FDEAB35FE86B8931A3E7266AD4D91A66A62B2E5A1959545CCB6BC64EE693E28191CBB591A10929F30D', 'hex');
            var publicKey = Buffer.from('2CBC6476457EC9041882FB2608F13FD9383DE3ECE41E4544A38D515ED35886A8', 'hex'); // nano_1d7weju6czpb1iea7ys835rmzpbr9qjyss1yao4c95cjduboj3oaj7weaxzw
            assert(SignatureVerifier_1.default.verify(message, new UInt512_1.default({ buffer: signatureBuffer }), new UInt256_1.default({ buffer: publicKey })));
        });
        it('should not assert an invalid signature', function () {
            var secretKeyUint8Array = someSecretKeyUint8Array;
            var message = Buffer.from('testing');
            var signature = MessageSigner_1.default.sign(new UInt512_1.default({ uint8Array: secretKeyUint8Array }), message);
            var publicKey = nacl.sign.keyPair.fromSecretKey(secretKeyUint8Array).publicKey;
            assert(SignatureVerifier_1.default.verify(message, signature, new UInt256_1.default({ uint8Array: publicKey })));
            var modifiedSignatureUint8Array = signature.value.asUint8Array();
            modifiedSignatureUint8Array[0] = 0;
            var modifiedSignature = new Numbers_1.Signature(new UInt512_1.default({ uint8Array: modifiedSignatureUint8Array }));
            assert(!SignatureVerifier_1.default.verify(message, modifiedSignature, new UInt256_1.default({ uint8Array: publicKey })));
        });
    });
});
//# sourceMappingURL=TestSignatureVerifier.js.map